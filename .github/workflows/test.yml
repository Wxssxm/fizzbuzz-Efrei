name: Run FizzBuzz Tests with unittest and Docker

on:
  push:
    branches:
      - main
      - docker
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Run Python Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          coverage run -m unittest discover tests
          coverage report -m
          coverage xml  # Génère un fichier XML pour publication

      - name: Run Flake8 for code quality
        run: flake8 main.py tests/testmain.py

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/

  test_docker:
    name: Run Tests Inside Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found! Skipping Docker image build."
            exit 1
          fi

      - name: Set up Docker
        run: docker --version

      - name: Build Docker image
        run: |
          TEMP_DIR=$(mktemp -d)
          cp -r . "$TEMP_DIR"
          cd "$TEMP_DIR"
          docker build -t fizzbuzz-app .

      - name: Run tests inside Docker
        run: |
          docker run --rm fizzbuzz-app python -m unittest discover tests

  deploy_docker:
    name: Deploy Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: test_docker  # Cette étape ne s'exécute que si test_docker réussit

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found! Skipping deployment."
            exit 1
          fi

      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/fizzbuzz-app"
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Push Docker Image to DockerHub
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/fizzbuzz-app"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$(git rev-parse --short HEAD)
